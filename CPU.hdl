// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=inforareg);
    Not(in=instruction[15], out=notopt);
    Or(a=notopt, b=instruction[5], out=loadfora);
    ARegister(in=inforareg, load=loadfora, out[0..14]=addressM[0..14],out=aregout);


    Mux16(a=aregout, b=inM, sel=instruction[12], out=yofalu);


    And(a=instruction[15], b=instruction[4], out=loadford);
    DRegister(in=aluout, load=loadford, out=xofalu);


    ALU(x=xofalu, y=yofalu, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,out=aluout, zr=zr, ng=ng);


    And(a=instruction[15], b=instruction[3], out=loadformux);
    Mux(a=false, b=true, sel=loadformux, out=writeM);

    And(a=instruction[0], b=instruction[1], out=inst0and1);
    And(a=instruction[2], b=inst0and1, out=UNC);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    And(a=notzr, b=notng, out=zrandng);
    And(a=instruction[0], b=zrandng, out=GLT);

    And(a=instruction[2], b=ng, out=LGT);

    And(a=instruction[1], b=zr, out=GET);

    Or(a=UNC, b=GLT, out=uncorglt);
    Or(a=uncorglt, b=LGT, out=orlgt);
    Or(a=orlgt, b=GET, out=orload);
    
    
    
    And(a=instruction[15], b=orload, out=loadforpc);

    Not(in=loadforpc, out=inforinc);

    PC(in=aregout, load=loadforpc, inc=inforinc, reset=reset, out[0..14]=pc[0..14]);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



    
    

    
    
    
    


    
    
    
      
}